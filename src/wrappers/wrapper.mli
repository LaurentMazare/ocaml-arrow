(* THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT! *)

type _ gobject


module Array : sig
  type t = [ `array_ ] gobject

  val cast : [> `array_ ] gobject -> [> `data_type ] gobject -> [> `cast_options ] gobject -> [ `array_ ] gobject
  val count : [> `array_ ] gobject -> [> `count_options ] gobject -> Int64.t
  val count_values : [> `array_ ] gobject -> [ `struct_array | `array_ ] gobject
  val dictionary_encode : [> `array_ ] gobject -> [ `dictionary_array | `array_ ] gobject
  val equal : [> `array_ ] gobject -> [> `array_ ] gobject -> bool
  val equal_approx : [> `array_ ] gobject -> [> `array_ ] gobject -> bool
  val equal_range : [> `array_ ] gobject -> Int64.t -> [> `array_ ] gobject -> Int64.t -> Int64.t -> bool
  val get_length : [> `array_ ] gobject -> Int64.t
  val get_n_nulls : [> `array_ ] gobject -> Int64.t
  val get_null_bitmap : [> `array_ ] gobject -> [ `buffer ] gobject
  val get_offset : [> `array_ ] gobject -> Int64.t
  val get_value_data_type : [> `array_ ] gobject -> [ `data_type ] gobject
  val is_null : [> `array_ ] gobject -> Int64.t -> bool
  val is_valid : [> `array_ ] gobject -> Int64.t -> bool
  val slice : [> `array_ ] gobject -> Int64.t -> Int64.t -> [ `array_ ] gobject
  val to_string : [> `array_ ] gobject -> string
  val unique : [> `array_ ] gobject -> [ `array_ ] gobject
end

module ArrayBuilder : sig
  type t = [ `array_builder ] gobject

  val finish : [> `array_builder ] gobject -> [ `array_ ] gobject
  val get_value_data_type : [> `array_builder ] gobject -> [ `data_type ] gobject
end

module BinaryArray : sig
  type t = [ `binary_array | `array_ ] gobject

  val new_ : Int64.t -> [> `buffer ] gobject -> [> `buffer ] gobject -> [> `buffer ] gobject -> Int64.t -> t
  val get_buffer : [> `binary_array ] gobject -> [ `buffer ] gobject
  val get_offsets_buffer : [> `binary_array ] gobject -> [ `buffer ] gobject
end

module BinaryArrayBuilder : sig
  type t = [ `binary_array_builder | `array_builder ] gobject

  val new_ : unit -> t
  val append_null : [> `binary_array_builder ] gobject -> bool
end

module BinaryDataType : sig
  type t = [ `binary_data_type | `data_type ] gobject

  val new_ : unit -> t
end

module BooleanArray : sig
  type t = [ `boolean_array | `primitive_array | `array_ ] gobject

  val new_ : Int64.t -> [> `buffer ] gobject -> [> `buffer ] gobject -> Int64.t -> t
  val and_ : [> `boolean_array ] gobject -> [> `boolean_array ] gobject -> [ `boolean_array | `primitive_array | `array_ ] gobject
  val get_value : [> `boolean_array ] gobject -> Int64.t -> bool
  val invert : [> `boolean_array ] gobject -> [ `boolean_array | `primitive_array | `array_ ] gobject
  val or_ : [> `boolean_array ] gobject -> [> `boolean_array ] gobject -> [ `boolean_array | `primitive_array | `array_ ] gobject
  val xor : [> `boolean_array ] gobject -> [> `boolean_array ] gobject -> [ `boolean_array | `primitive_array | `array_ ] gobject
end

module BooleanArrayBuilder : sig
  type t = [ `boolean_array_builder | `array_builder ] gobject

  val new_ : unit -> t
  val append_null : [> `boolean_array_builder ] gobject -> bool
  val append_nulls : [> `boolean_array_builder ] gobject -> Int64.t -> bool
  val append_value : [> `boolean_array_builder ] gobject -> bool -> bool
end

module BooleanDataType : sig
  type t = [ `boolean_data_type | `fixed_width_data_type | `data_type ] gobject

  val new_ : unit -> t
end

module Buffer : sig
  type t = [ `buffer ] gobject

  val copy : [> `buffer ] gobject -> Int64.t -> Int64.t -> [ `buffer ] gobject
  val equal : [> `buffer ] gobject -> [> `buffer ] gobject -> bool
  val equal_n_bytes : [> `buffer ] gobject -> [> `buffer ] gobject -> Int64.t -> bool
  val get_capacity : [> `buffer ] gobject -> Int64.t
  val get_parent : [> `buffer ] gobject -> [ `buffer ] gobject
  val get_size : [> `buffer ] gobject -> Int64.t
  val is_mutable : [> `buffer ] gobject -> bool
  val slice : [> `buffer ] gobject -> Int64.t -> Int64.t -> [ `buffer ] gobject
end

module BufferInputStream : sig
  type t = [ `buffer_input_stream | `seekable_input_stream | `input_stream ] gobject

  val new_ : [> `buffer ] gobject -> t
  val get_buffer : [> `buffer_input_stream ] gobject -> [ `buffer ] gobject
end

module BufferOutputStream : sig
  type t = [ `buffer_output_stream | `output_stream ] gobject

  val new_ : [> `resizable_buffer ] gobject -> t
end

module CSVReadOptions : sig
  type t = [ `csv_read_options ] gobject

  val new_ : unit -> t
end

module CSVReader : sig
  type t = [ `csv_reader ] gobject

  val new_ : [> `input_stream ] gobject -> [> `csv_read_options ] gobject -> t
  val read : [> `csv_reader ] gobject -> [ `table ] gobject
end

module CastOptions : sig
  type t = [ `cast_options ] gobject

  val new_ : unit -> t
end

module ChunkedArray : sig
  type t = [ `chunked_array ] gobject

  val equal : [> `chunked_array ] gobject -> [> `chunked_array ] gobject -> bool
  val get_chunk : [> `chunked_array ] gobject -> Unsigned.uint32 -> [ `array_ ] gobject
  val get_length : [> `chunked_array ] gobject -> Unsigned.uint64
  val get_n_chunks : [> `chunked_array ] gobject -> Unsigned.uint32
  val get_n_nulls : [> `chunked_array ] gobject -> Unsigned.uint64
  val get_value_data_type : [> `chunked_array ] gobject -> [ `data_type ] gobject
  val slice : [> `chunked_array ] gobject -> Unsigned.uint64 -> Unsigned.uint64 -> [ `chunked_array ] gobject
  val to_string : [> `chunked_array ] gobject -> string
end

module Codec : sig
  type t = [ `codec ] gobject

  val get_name : [> `codec ] gobject -> string
end

module Column : sig
  type t = [ `column ] gobject

  val new_array : [> `field ] gobject -> [> `array_ ] gobject -> t
  val new_chunked_array : [> `field ] gobject -> [> `chunked_array ] gobject -> t
  val equal : [> `column ] gobject -> [> `column ] gobject -> bool
  val get_data : [> `column ] gobject -> [ `chunked_array ] gobject
  val get_data_type : [> `column ] gobject -> [ `data_type ] gobject
  val get_field : [> `column ] gobject -> [ `field ] gobject
  val get_length : [> `column ] gobject -> Unsigned.uint64
  val get_n_nulls : [> `column ] gobject -> Unsigned.uint64
  val get_name : [> `column ] gobject -> string
  val slice : [> `column ] gobject -> Unsigned.uint64 -> Unsigned.uint64 -> [ `column ] gobject
  val to_string : [> `column ] gobject -> string
end

module CompressedInputStream : sig
  type t = [ `compressed_input_stream | `input_stream ] gobject

  val new_ : [> `codec ] gobject -> [> `input_stream ] gobject -> t
end

module CompressedOutputStream : sig
  type t = [ `compressed_output_stream | `output_stream ] gobject

  val new_ : [> `codec ] gobject -> [> `output_stream ] gobject -> t
end

module CountOptions : sig
  type t = [ `count_options ] gobject

  val new_ : unit -> t
end

module DataType : sig
  type t = [ `data_type ] gobject

  val equal : [> `data_type ] gobject -> [> `data_type ] gobject -> bool
  val to_string : [> `data_type ] gobject -> string
end

module Date32Array : sig
  type t = [ `date32_array | `numeric_array | `primitive_array | `array_ ] gobject

  val new_ : Int64.t -> [> `buffer ] gobject -> [> `buffer ] gobject -> Int64.t -> t
  val get_value : [> `date32_array ] gobject -> Int64.t -> Int32.t
end

module Date32ArrayBuilder : sig
  type t = [ `date32_array_builder | `array_builder ] gobject

  val new_ : unit -> t
  val append_null : [> `date32_array_builder ] gobject -> bool
  val append_nulls : [> `date32_array_builder ] gobject -> Int64.t -> bool
  val append_value : [> `date32_array_builder ] gobject -> Int32.t -> bool
end

module Date32DataType : sig
  type t = [ `date32_data_type | `data_type ] gobject

  val new_ : unit -> t
end

module Date64Array : sig
  type t = [ `date64_array | `numeric_array | `primitive_array | `array_ ] gobject

  val new_ : Int64.t -> [> `buffer ] gobject -> [> `buffer ] gobject -> Int64.t -> t
  val get_value : [> `date64_array ] gobject -> Int64.t -> Int64.t
end

module Date64ArrayBuilder : sig
  type t = [ `date64_array_builder | `array_builder ] gobject

  val new_ : unit -> t
  val append_null : [> `date64_array_builder ] gobject -> bool
  val append_nulls : [> `date64_array_builder ] gobject -> Int64.t -> bool
  val append_value : [> `date64_array_builder ] gobject -> Int64.t -> bool
end

module Date64DataType : sig
  type t = [ `date64_data_type | `data_type ] gobject

  val new_ : unit -> t
end

module Decimal128 : sig
  type t = [ `decimal128 ] gobject

  val new_integer : Int64.t -> t
  val new_string : string -> t
  val divide : [> `decimal128 ] gobject -> [> `decimal128 ] gobject -> [> `decimal128 ] gobject -> [ `decimal128 ] gobject
  val equal : [> `decimal128 ] gobject -> [> `decimal128 ] gobject -> bool
  val greater_than : [> `decimal128 ] gobject -> [> `decimal128 ] gobject -> bool
  val greater_than_or_equal : [> `decimal128 ] gobject -> [> `decimal128 ] gobject -> bool
  val less_than : [> `decimal128 ] gobject -> [> `decimal128 ] gobject -> bool
  val less_than_or_equal : [> `decimal128 ] gobject -> [> `decimal128 ] gobject -> bool
  val minus : [> `decimal128 ] gobject -> [> `decimal128 ] gobject -> [ `decimal128 ] gobject
  val multiply : [> `decimal128 ] gobject -> [> `decimal128 ] gobject -> [ `decimal128 ] gobject
  val not_equal : [> `decimal128 ] gobject -> [> `decimal128 ] gobject -> bool
  val plus : [> `decimal128 ] gobject -> [> `decimal128 ] gobject -> [ `decimal128 ] gobject
  val to_integer : [> `decimal128 ] gobject -> Int64.t
  val to_string : [> `decimal128 ] gobject -> string
  val to_string_scale : [> `decimal128 ] gobject -> Int32.t -> string
end

module Decimal128Array : sig
  type t = [ `decimal128_array | `fixed_size_binary_array | `primitive_array | `array_ ] gobject

  val format_value : [> `decimal128_array ] gobject -> Int64.t -> string
  val get_value : [> `decimal128_array ] gobject -> Int64.t -> [ `decimal128 ] gobject
end

module Decimal128ArrayBuilder : sig
  type t = [ `decimal128_array_builder | `array_builder ] gobject

  val new_ : [> `decimal128_data_type ] gobject -> t
  val append_null : [> `decimal128_array_builder ] gobject -> bool
  val append_value : [> `decimal128_array_builder ] gobject -> [> `decimal128 ] gobject -> bool
end

module Decimal128DataType : sig
  type t = [ `decimal128_data_type | `decimal_data_type | `fixed_size_binary_data_type | `fixed_width_data_type | `data_type ] gobject

  val new_ : Int32.t -> Int32.t -> t
end

module DecimalDataType : sig
  type t = [ `decimal_data_type | `fixed_size_binary_data_type | `fixed_width_data_type | `data_type ] gobject

  val get_precision : [> `decimal_data_type ] gobject -> Int32.t
  val get_scale : [> `decimal_data_type ] gobject -> Int32.t
end

module DenseUnionArray : sig
  type t = [ `dense_union_array | `union_array | `array_ ] gobject

end

module DenseUnionDataType : sig
  type t = [ `dense_union_data_type | `union_data_type | `data_type ] gobject

end

module DictionaryArray : sig
  type t = [ `dictionary_array | `array_ ] gobject

  val new_ : [> `data_type ] gobject -> [> `array_ ] gobject -> t
  val get_dictionary : [> `dictionary_array ] gobject -> [ `array_ ] gobject
  val get_dictionary_data_type : [> `dictionary_array ] gobject -> [ `dictionary_data_type | `fixed_width_data_type | `data_type ] gobject
  val get_indices : [> `dictionary_array ] gobject -> [ `array_ ] gobject
end

module DictionaryDataType : sig
  type t = [ `dictionary_data_type | `fixed_width_data_type | `data_type ] gobject

  val new_ : [> `data_type ] gobject -> [> `array_ ] gobject -> bool -> t
  val get_dictionary : [> `dictionary_data_type ] gobject -> [ `array_ ] gobject
  val get_index_data_type : [> `dictionary_data_type ] gobject -> [ `data_type ] gobject
  val is_ordered : [> `dictionary_data_type ] gobject -> bool
end

module DoubleArray : sig
  type t = [ `double_array | `numeric_array | `primitive_array | `array_ ] gobject

  val new_ : Int64.t -> [> `buffer ] gobject -> [> `buffer ] gobject -> Int64.t -> t
  val get_value : [> `double_array ] gobject -> Int64.t -> float
  val sum : [> `double_array ] gobject -> float
end

module DoubleArrayBuilder : sig
  type t = [ `double_array_builder | `array_builder ] gobject

  val new_ : unit -> t
  val append_null : [> `double_array_builder ] gobject -> bool
  val append_nulls : [> `double_array_builder ] gobject -> Int64.t -> bool
  val append_value : [> `double_array_builder ] gobject -> float -> bool
end

module DoubleDataType : sig
  type t = [ `double_data_type | `floating_point_data_type | `numeric_data_type | `fixed_width_data_type | `data_type ] gobject

  val new_ : unit -> t
end

module FeatherFileReader : sig
  type t = [ `feather_file_reader ] gobject

  val new_ : [> `seekable_input_stream ] gobject -> t
  val get_column : [> `feather_file_reader ] gobject -> Int32.t -> [ `column ] gobject
  val get_column_name : [> `feather_file_reader ] gobject -> Int32.t -> string
  val get_description : [> `feather_file_reader ] gobject -> string
  val get_n_columns : [> `feather_file_reader ] gobject -> Int64.t
  val get_n_rows : [> `feather_file_reader ] gobject -> Int64.t
  val get_version : [> `feather_file_reader ] gobject -> Int32.t
  val has_description : [> `feather_file_reader ] gobject -> bool
  val read : [> `feather_file_reader ] gobject -> [ `table ] gobject
end

module FeatherFileWriter : sig
  type t = [ `feather_file_writer ] gobject

  val new_ : [> `output_stream ] gobject -> t
  val append : [> `feather_file_writer ] gobject -> string -> [> `array_ ] gobject -> bool
  val close : [> `feather_file_writer ] gobject -> bool
  val write : [> `feather_file_writer ] gobject -> [> `table ] gobject -> bool
end

module Field : sig
  type t = [ `field ] gobject

  val new_ : string -> [> `data_type ] gobject -> t
  val new_full : string -> [> `data_type ] gobject -> bool -> t
  val equal : [> `field ] gobject -> [> `field ] gobject -> bool
  val get_data_type : [> `field ] gobject -> [ `data_type ] gobject
  val get_name : [> `field ] gobject -> string
  val is_nullable : [> `field ] gobject -> bool
  val to_string : [> `field ] gobject -> string
end

module FileOutputStream : sig
  type t = [ `file_output_stream | `output_stream ] gobject

  val new_ : string -> bool -> t
end

module FixedSizeBinaryArray : sig
  type t = [ `fixed_size_binary_array | `primitive_array | `array_ ] gobject

end

module FixedSizeBinaryDataType : sig
  type t = [ `fixed_size_binary_data_type | `fixed_width_data_type | `data_type ] gobject

  val new_ : Int32.t -> t
  val get_byte_width : [> `fixed_size_binary_data_type ] gobject -> Int32.t
end

module FixedWidthDataType : sig
  type t = [ `fixed_width_data_type | `data_type ] gobject

  val get_bit_width : [> `fixed_width_data_type ] gobject -> Int32.t
end

module FloatArray : sig
  type t = [ `float_array | `numeric_array | `primitive_array | `array_ ] gobject

  val new_ : Int64.t -> [> `buffer ] gobject -> [> `buffer ] gobject -> Int64.t -> t
  val get_value : [> `float_array ] gobject -> Int64.t -> float
  val sum : [> `float_array ] gobject -> float
end

module FloatArrayBuilder : sig
  type t = [ `float_array_builder | `array_builder ] gobject

  val new_ : unit -> t
  val append_null : [> `float_array_builder ] gobject -> bool
  val append_nulls : [> `float_array_builder ] gobject -> Int64.t -> bool
  val append_value : [> `float_array_builder ] gobject -> float -> bool
end

module FloatDataType : sig
  type t = [ `float_data_type | `floating_point_data_type | `numeric_data_type | `fixed_width_data_type | `data_type ] gobject

  val new_ : unit -> t
end

module FloatingPointDataType : sig
  type t = [ `floating_point_data_type | `numeric_data_type | `fixed_width_data_type | `data_type ] gobject

end

module GIOInputStream : sig
  type t = [ `gio_input_stream | `seekable_input_stream | `input_stream ] gobject

  val new_ : [> `input_stream ] gobject -> t
end

module GIOOutputStream : sig
  type t = [ `gio_output_stream | `output_stream ] gobject

  val new_ : [> `output_stream ] gobject -> t
end

module InputStream : sig
  type t = [ `input_stream ] gobject

  val advance : [> `input_stream ] gobject -> Int64.t -> bool
  val align : [> `input_stream ] gobject -> Int32.t -> bool
  val read_tensor : [> `input_stream ] gobject -> [ `tensor ] gobject
end

module Int16Array : sig
  type t = [ `int16_array | `numeric_array | `primitive_array | `array_ ] gobject

  val new_ : Int64.t -> [> `buffer ] gobject -> [> `buffer ] gobject -> Int64.t -> t
  val get_value : [> `int16_array ] gobject -> Int64.t -> int
  val sum : [> `int16_array ] gobject -> Int64.t
end

module Int16ArrayBuilder : sig
  type t = [ `int16_array_builder | `array_builder ] gobject

  val new_ : unit -> t
  val append_null : [> `int16_array_builder ] gobject -> bool
  val append_nulls : [> `int16_array_builder ] gobject -> Int64.t -> bool
  val append_value : [> `int16_array_builder ] gobject -> int -> bool
end

module Int16DataType : sig
  type t = [ `int16_data_type | `integer_data_type | `numeric_data_type | `fixed_width_data_type | `data_type ] gobject

  val new_ : unit -> t
end

module Int32Array : sig
  type t = [ `int32_array | `numeric_array | `primitive_array | `array_ ] gobject

  val new_ : Int64.t -> [> `buffer ] gobject -> [> `buffer ] gobject -> Int64.t -> t
  val get_value : [> `int32_array ] gobject -> Int64.t -> Int32.t
  val sum : [> `int32_array ] gobject -> Int64.t
end

module Int32ArrayBuilder : sig
  type t = [ `int32_array_builder | `array_builder ] gobject

  val new_ : unit -> t
  val append_null : [> `int32_array_builder ] gobject -> bool
  val append_nulls : [> `int32_array_builder ] gobject -> Int64.t -> bool
  val append_value : [> `int32_array_builder ] gobject -> Int32.t -> bool
end

module Int32DataType : sig
  type t = [ `int32_data_type | `integer_data_type | `numeric_data_type | `fixed_width_data_type | `data_type ] gobject

  val new_ : unit -> t
end

module Int64Array : sig
  type t = [ `int64_array | `numeric_array | `primitive_array | `array_ ] gobject

  val new_ : Int64.t -> [> `buffer ] gobject -> [> `buffer ] gobject -> Int64.t -> t
  val get_value : [> `int64_array ] gobject -> Int64.t -> Int64.t
  val sum : [> `int64_array ] gobject -> Int64.t
end

module Int64ArrayBuilder : sig
  type t = [ `int64_array_builder | `array_builder ] gobject

  val new_ : unit -> t
  val append_null : [> `int64_array_builder ] gobject -> bool
  val append_nulls : [> `int64_array_builder ] gobject -> Int64.t -> bool
  val append_value : [> `int64_array_builder ] gobject -> Int64.t -> bool
end

module Int64DataType : sig
  type t = [ `int64_data_type | `integer_data_type | `numeric_data_type | `fixed_width_data_type | `data_type ] gobject

  val new_ : unit -> t
end

module Int8Array : sig
  type t = [ `int8_array | `numeric_array | `primitive_array | `array_ ] gobject

  val new_ : Int64.t -> [> `buffer ] gobject -> [> `buffer ] gobject -> Int64.t -> t
  val get_value : [> `int8_array ] gobject -> Int64.t -> int
  val sum : [> `int8_array ] gobject -> Int64.t
end

module Int8ArrayBuilder : sig
  type t = [ `int8_array_builder | `array_builder ] gobject

  val new_ : unit -> t
  val append_null : [> `int8_array_builder ] gobject -> bool
  val append_nulls : [> `int8_array_builder ] gobject -> Int64.t -> bool
  val append_value : [> `int8_array_builder ] gobject -> int -> bool
end

module Int8DataType : sig
  type t = [ `int8_data_type | `integer_data_type | `numeric_data_type | `fixed_width_data_type | `data_type ] gobject

  val new_ : unit -> t
end

module IntArrayBuilder : sig
  type t = [ `int_array_builder | `array_builder ] gobject

  val new_ : unit -> t
  val append_null : [> `int_array_builder ] gobject -> bool
  val append_nulls : [> `int_array_builder ] gobject -> Int64.t -> bool
  val append_value : [> `int_array_builder ] gobject -> Int64.t -> bool
end

module IntegerDataType : sig
  type t = [ `integer_data_type | `numeric_data_type | `fixed_width_data_type | `data_type ] gobject

end

module ListArray : sig
  type t = [ `list_array | `array_ ] gobject

  val new_ : [> `data_type ] gobject -> Int64.t -> [> `buffer ] gobject -> [> `array_ ] gobject -> [> `buffer ] gobject -> Int64.t -> t
  val get_value : [> `list_array ] gobject -> Int64.t -> [ `array_ ] gobject
  val get_value_type : [> `list_array ] gobject -> [ `data_type ] gobject
end

module ListArrayBuilder : sig
  type t = [ `list_array_builder | `array_builder ] gobject

  val new_ : [> `list_data_type ] gobject -> t
  val append_null : [> `list_array_builder ] gobject -> bool
  val append_value : [> `list_array_builder ] gobject -> bool
  val get_value_builder : [> `list_array_builder ] gobject -> [ `array_builder ] gobject
end

module ListDataType : sig
  type t = [ `list_data_type | `data_type ] gobject

  val new_ : [> `field ] gobject -> t
  val get_field : [> `list_data_type ] gobject -> [ `field ] gobject
end

module MemoryMappedInputStream : sig
  type t = [ `memory_mapped_input_stream | `seekable_input_stream | `input_stream ] gobject

  val new_ : string -> t
end

module MutableBuffer : sig
  type t = [ `mutable_buffer | `buffer ] gobject

  val slice : [> `mutable_buffer ] gobject -> Int64.t -> Int64.t -> [ `mutable_buffer | `buffer ] gobject
end

module NullArray : sig
  type t = [ `null_array | `array_ ] gobject

  val new_ : Int64.t -> t
end

module NullArrayBuilder : sig
  type t = [ `null_array_builder | `array_builder ] gobject

  val new_ : unit -> t
  val append_null : [> `null_array_builder ] gobject -> bool
  val append_nulls : [> `null_array_builder ] gobject -> Int64.t -> bool
end

module NullDataType : sig
  type t = [ `null_data_type | `data_type ] gobject

  val new_ : unit -> t
end

module NumericArray : sig
  type t = [ `numeric_array | `primitive_array | `array_ ] gobject

  val mean : [> `numeric_array ] gobject -> float
end

module NumericDataType : sig
  type t = [ `numeric_data_type | `fixed_width_data_type | `data_type ] gobject

end

module OutputStream : sig
  type t = [ `output_stream ] gobject

  val align : [> `output_stream ] gobject -> Int32.t -> bool
  val write_tensor : [> `output_stream ] gobject -> [> `tensor ] gobject -> Int64.t
end

module PrimitiveArray : sig
  type t = [ `primitive_array | `array_ ] gobject

  val get_buffer : [> `primitive_array ] gobject -> [ `buffer ] gobject
end

module RecordBatch : sig
  type t = [ `record_batch ] gobject

  val add_column : [> `record_batch ] gobject -> Unsigned.uint32 -> [> `field ] gobject -> [> `array_ ] gobject -> [ `record_batch ] gobject
  val equal : [> `record_batch ] gobject -> [> `record_batch ] gobject -> bool
  val get_column : [> `record_batch ] gobject -> Int32.t -> [ `array_ ] gobject
  val get_column_name : [> `record_batch ] gobject -> Int32.t -> string
  val get_n_columns : [> `record_batch ] gobject -> Unsigned.uint32
  val get_n_rows : [> `record_batch ] gobject -> Int64.t
  val get_schema : [> `record_batch ] gobject -> [ `schema ] gobject
  val remove_column : [> `record_batch ] gobject -> Unsigned.uint32 -> [ `record_batch ] gobject
  val slice : [> `record_batch ] gobject -> Int64.t -> Int64.t -> [ `record_batch ] gobject
  val to_string : [> `record_batch ] gobject -> string
end

module RecordBatchBuilder : sig
  type t = [ `record_batch_builder ] gobject

  val new_ : [> `schema ] gobject -> t
  val flush : [> `record_batch_builder ] gobject -> [ `record_batch ] gobject
  val get_column_builder : [> `record_batch_builder ] gobject -> Int32.t -> [ `array_builder ] gobject
  val get_initial_capacity : [> `record_batch_builder ] gobject -> Int64.t
  val get_n_columns : [> `record_batch_builder ] gobject -> Int32.t
  val get_schema : [> `record_batch_builder ] gobject -> [ `schema ] gobject
end

module RecordBatchFileReader : sig
  type t = [ `record_batch_file_reader ] gobject

  val new_ : [> `seekable_input_stream ] gobject -> t
  val get_n_record_batches : [> `record_batch_file_reader ] gobject -> Unsigned.uint32
  val get_schema : [> `record_batch_file_reader ] gobject -> [ `schema ] gobject
  val read_record_batch : [> `record_batch_file_reader ] gobject -> Unsigned.uint32 -> [ `record_batch ] gobject
end

module RecordBatchFileWriter : sig
  type t = [ `record_batch_file_writer | `record_batch_stream_writer | `record_batch_writer ] gobject

  val new_ : [> `output_stream ] gobject -> [> `schema ] gobject -> t
end

module RecordBatchReader : sig
  type t = [ `record_batch_reader ] gobject

  val get_schema : [> `record_batch_reader ] gobject -> [ `schema ] gobject
  val read_next : [> `record_batch_reader ] gobject -> [ `record_batch ] gobject
end

module RecordBatchStreamReader : sig
  type t = [ `record_batch_stream_reader | `record_batch_reader ] gobject

  val new_ : [> `input_stream ] gobject -> t
end

module RecordBatchStreamWriter : sig
  type t = [ `record_batch_stream_writer | `record_batch_writer ] gobject

  val new_ : [> `output_stream ] gobject -> [> `schema ] gobject -> t
end

module RecordBatchWriter : sig
  type t = [ `record_batch_writer ] gobject

  val close : [> `record_batch_writer ] gobject -> bool
  val write_record_batch : [> `record_batch_writer ] gobject -> [> `record_batch ] gobject -> bool
  val write_table : [> `record_batch_writer ] gobject -> [> `table ] gobject -> bool
end

module ResizableBuffer : sig
  type t = [ `resizable_buffer | `mutable_buffer | `buffer ] gobject

  val new_ : Int64.t -> t
  val reserve : [> `resizable_buffer ] gobject -> Int64.t -> bool
  val resize : [> `resizable_buffer ] gobject -> Int64.t -> bool
end

module Schema : sig
  type t = [ `schema ] gobject

  val add_field : [> `schema ] gobject -> Unsigned.uint32 -> [> `field ] gobject -> [ `schema ] gobject
  val equal : [> `schema ] gobject -> [> `schema ] gobject -> bool
  val get_field : [> `schema ] gobject -> Unsigned.uint32 -> [ `field ] gobject
  val get_field_by_name : [> `schema ] gobject -> string -> [ `field ] gobject
  val n_fields : [> `schema ] gobject -> Unsigned.uint32
  val remove_field : [> `schema ] gobject -> Unsigned.uint32 -> [ `schema ] gobject
  val replace_field : [> `schema ] gobject -> Unsigned.uint32 -> [> `field ] gobject -> [ `schema ] gobject
  val to_string : [> `schema ] gobject -> string
end

module SeekableInputStream : sig
  type t = [ `seekable_input_stream | `input_stream ] gobject

  val get_size : [> `seekable_input_stream ] gobject -> Unsigned.uint64
  val get_support_zero_copy : [> `seekable_input_stream ] gobject -> bool
  val read_at : [> `seekable_input_stream ] gobject -> Int64.t -> Int64.t -> [ `buffer ] gobject
end

module SparseUnionArray : sig
  type t = [ `sparse_union_array | `union_array | `array_ ] gobject

end

module SparseUnionDataType : sig
  type t = [ `sparse_union_data_type | `union_data_type | `data_type ] gobject

end

module StringArray : sig
  type t = [ `string_array | `binary_array | `array_ ] gobject

  val new_ : Int64.t -> [> `buffer ] gobject -> [> `buffer ] gobject -> [> `buffer ] gobject -> Int64.t -> t
  val get_string : [> `string_array ] gobject -> Int64.t -> string
end

module StringArrayBuilder : sig
  type t = [ `string_array_builder | `binary_array_builder | `array_builder ] gobject

  val new_ : unit -> t
  val append_value : [> `string_array_builder ] gobject -> string -> bool
end

module StringDataType : sig
  type t = [ `string_data_type | `data_type ] gobject

  val new_ : unit -> t
end

module StructArray : sig
  type t = [ `struct_array | `array_ ] gobject

  val get_field : [> `struct_array ] gobject -> Int32.t -> [ `array_ ] gobject
end

module StructArrayBuilder : sig
  type t = [ `struct_array_builder | `array_builder ] gobject

  val new_ : [> `struct_data_type ] gobject -> t
  val append_null : [> `struct_array_builder ] gobject -> bool
  val append_value : [> `struct_array_builder ] gobject -> bool
  val get_field_builder : [> `struct_array_builder ] gobject -> Int32.t -> [ `array_builder ] gobject
end

module StructDataType : sig
  type t = [ `struct_data_type | `data_type ] gobject

  val get_field : [> `struct_data_type ] gobject -> Int32.t -> [ `field ] gobject
  val get_field_by_name : [> `struct_data_type ] gobject -> string -> [ `field ] gobject
  val get_field_index : [> `struct_data_type ] gobject -> string -> Int32.t
  val get_n_fields : [> `struct_data_type ] gobject -> Int32.t
end

module Table : sig
  type t = [ `table ] gobject

  val add_column : [> `table ] gobject -> Unsigned.uint32 -> [> `column ] gobject -> [ `table ] gobject
  val equal : [> `table ] gobject -> [> `table ] gobject -> bool
  val get_column : [> `table ] gobject -> Unsigned.uint32 -> [ `column ] gobject
  val get_n_columns : [> `table ] gobject -> Unsigned.uint32
  val get_n_rows : [> `table ] gobject -> Unsigned.uint64
  val get_schema : [> `table ] gobject -> [ `schema ] gobject
  val remove_column : [> `table ] gobject -> Unsigned.uint32 -> [ `table ] gobject
  val replace_column : [> `table ] gobject -> Unsigned.uint32 -> [> `column ] gobject -> [ `table ] gobject
  val to_string : [> `table ] gobject -> string
end

module TableBatchReader : sig
  type t = [ `table_batch_reader | `record_batch_reader ] gobject

  val new_ : [> `table ] gobject -> t
end

module Tensor : sig
  type t = [ `tensor ] gobject

  val equal : [> `tensor ] gobject -> [> `tensor ] gobject -> bool
  val get_buffer : [> `tensor ] gobject -> [ `buffer ] gobject
  val get_dimension_name : [> `tensor ] gobject -> Int32.t -> string
  val get_n_dimensions : [> `tensor ] gobject -> Int32.t
  val get_size : [> `tensor ] gobject -> Int64.t
  val get_value_data_type : [> `tensor ] gobject -> [ `data_type ] gobject
  val is_column_major : [> `tensor ] gobject -> bool
  val is_contiguous : [> `tensor ] gobject -> bool
  val is_mutable : [> `tensor ] gobject -> bool
  val is_row_major : [> `tensor ] gobject -> bool
end

module Time32Array : sig
  type t = [ `time32_array | `numeric_array | `primitive_array | `array_ ] gobject

  val new_ : [> `time32_data_type ] gobject -> Int64.t -> [> `buffer ] gobject -> [> `buffer ] gobject -> Int64.t -> t
  val get_value : [> `time32_array ] gobject -> Int64.t -> Int32.t
end

module Time32ArrayBuilder : sig
  type t = [ `time32_array_builder | `array_builder ] gobject

  val new_ : [> `time32_data_type ] gobject -> t
  val append_null : [> `time32_array_builder ] gobject -> bool
  val append_nulls : [> `time32_array_builder ] gobject -> Int64.t -> bool
  val append_value : [> `time32_array_builder ] gobject -> Int32.t -> bool
end

module Time32DataType : sig
  type t = [ `time32_data_type | `time_data_type | `data_type ] gobject

end

module Time64Array : sig
  type t = [ `time64_array | `numeric_array | `primitive_array | `array_ ] gobject

  val new_ : [> `time64_data_type ] gobject -> Int64.t -> [> `buffer ] gobject -> [> `buffer ] gobject -> Int64.t -> t
  val get_value : [> `time64_array ] gobject -> Int64.t -> Int64.t
end

module Time64ArrayBuilder : sig
  type t = [ `time64_array_builder | `array_builder ] gobject

  val new_ : [> `time64_data_type ] gobject -> t
  val append_null : [> `time64_array_builder ] gobject -> bool
  val append_nulls : [> `time64_array_builder ] gobject -> Int64.t -> bool
  val append_value : [> `time64_array_builder ] gobject -> Int64.t -> bool
end

module Time64DataType : sig
  type t = [ `time64_data_type | `time_data_type | `data_type ] gobject

end

module TimeDataType : sig
  type t = [ `time_data_type | `data_type ] gobject

end

module TimestampArray : sig
  type t = [ `timestamp_array | `numeric_array | `primitive_array | `array_ ] gobject

  val new_ : [> `timestamp_data_type ] gobject -> Int64.t -> [> `buffer ] gobject -> [> `buffer ] gobject -> Int64.t -> t
  val get_value : [> `timestamp_array ] gobject -> Int64.t -> Int64.t
end

module TimestampArrayBuilder : sig
  type t = [ `timestamp_array_builder | `array_builder ] gobject

  val new_ : [> `timestamp_data_type ] gobject -> t
  val append_null : [> `timestamp_array_builder ] gobject -> bool
  val append_nulls : [> `timestamp_array_builder ] gobject -> Int64.t -> bool
  val append_value : [> `timestamp_array_builder ] gobject -> Int64.t -> bool
end

module TimestampDataType : sig
  type t = [ `timestamp_data_type | `data_type ] gobject

end

module UInt16Array : sig
  type t = [ `u_int16_array | `numeric_array | `primitive_array | `array_ ] gobject

  val new_ : Int64.t -> [> `buffer ] gobject -> [> `buffer ] gobject -> Int64.t -> t
  val get_value : [> `u_int16_array ] gobject -> Int64.t -> Unsigned.uint16
  val sum : [> `u_int16_array ] gobject -> Unsigned.uint64
end

module UInt16ArrayBuilder : sig
  type t = [ `u_int16_array_builder | `array_builder ] gobject

  val new_ : unit -> t
  val append_null : [> `u_int16_array_builder ] gobject -> bool
  val append_nulls : [> `u_int16_array_builder ] gobject -> Int64.t -> bool
  val append_value : [> `u_int16_array_builder ] gobject -> Unsigned.uint16 -> bool
end

module UInt16DataType : sig
  type t = [ `u_int16_data_type | `integer_data_type | `numeric_data_type | `fixed_width_data_type | `data_type ] gobject

  val new_ : unit -> t
end

module UInt32Array : sig
  type t = [ `u_int32_array | `numeric_array | `primitive_array | `array_ ] gobject

  val new_ : Int64.t -> [> `buffer ] gobject -> [> `buffer ] gobject -> Int64.t -> t
  val get_value : [> `u_int32_array ] gobject -> Int64.t -> Unsigned.uint32
  val sum : [> `u_int32_array ] gobject -> Unsigned.uint64
end

module UInt32ArrayBuilder : sig
  type t = [ `u_int32_array_builder | `array_builder ] gobject

  val new_ : unit -> t
  val append_null : [> `u_int32_array_builder ] gobject -> bool
  val append_nulls : [> `u_int32_array_builder ] gobject -> Int64.t -> bool
  val append_value : [> `u_int32_array_builder ] gobject -> Unsigned.uint32 -> bool
end

module UInt32DataType : sig
  type t = [ `u_int32_data_type | `integer_data_type | `numeric_data_type | `fixed_width_data_type | `data_type ] gobject

  val new_ : unit -> t
end

module UInt64Array : sig
  type t = [ `u_int64_array | `numeric_array | `primitive_array | `array_ ] gobject

  val new_ : Int64.t -> [> `buffer ] gobject -> [> `buffer ] gobject -> Int64.t -> t
  val get_value : [> `u_int64_array ] gobject -> Int64.t -> Unsigned.uint64
  val sum : [> `u_int64_array ] gobject -> Unsigned.uint64
end

module UInt64ArrayBuilder : sig
  type t = [ `u_int64_array_builder | `array_builder ] gobject

  val new_ : unit -> t
  val append_null : [> `u_int64_array_builder ] gobject -> bool
  val append_nulls : [> `u_int64_array_builder ] gobject -> Int64.t -> bool
  val append_value : [> `u_int64_array_builder ] gobject -> Unsigned.uint64 -> bool
end

module UInt64DataType : sig
  type t = [ `u_int64_data_type | `integer_data_type | `numeric_data_type | `fixed_width_data_type | `data_type ] gobject

  val new_ : unit -> t
end

module UInt8Array : sig
  type t = [ `u_int8_array | `numeric_array | `primitive_array | `array_ ] gobject

  val new_ : Int64.t -> [> `buffer ] gobject -> [> `buffer ] gobject -> Int64.t -> t
  val get_value : [> `u_int8_array ] gobject -> Int64.t -> Unsigned.uint8
  val sum : [> `u_int8_array ] gobject -> Unsigned.uint64
end

module UInt8ArrayBuilder : sig
  type t = [ `u_int8_array_builder | `array_builder ] gobject

  val new_ : unit -> t
  val append_null : [> `u_int8_array_builder ] gobject -> bool
  val append_nulls : [> `u_int8_array_builder ] gobject -> Int64.t -> bool
  val append_value : [> `u_int8_array_builder ] gobject -> Unsigned.uint8 -> bool
end

module UInt8DataType : sig
  type t = [ `u_int8_data_type | `integer_data_type | `numeric_data_type | `fixed_width_data_type | `data_type ] gobject

  val new_ : unit -> t
end

module UIntArrayBuilder : sig
  type t = [ `u_int_array_builder | `array_builder ] gobject

  val new_ : unit -> t
  val append_null : [> `u_int_array_builder ] gobject -> bool
  val append_nulls : [> `u_int_array_builder ] gobject -> Int64.t -> bool
  val append_value : [> `u_int_array_builder ] gobject -> Unsigned.uint64 -> bool
end

module UnionArray : sig
  type t = [ `union_array | `array_ ] gobject

  val get_field : [> `union_array ] gobject -> Int32.t -> [ `array_ ] gobject
end

module UnionDataType : sig
  type t = [ `union_data_type | `data_type ] gobject

  val get_field : [> `union_data_type ] gobject -> Int32.t -> [ `field ] gobject
  val get_n_fields : [> `union_data_type ] gobject -> Int32.t
end

