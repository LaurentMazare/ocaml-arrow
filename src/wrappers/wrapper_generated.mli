(* THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT! *)

type _ gobject


module Array : sig
  type t = [ `array_ ] gobject

  val of_gobject : _ gobject -> t
  val cast : t -> [ `data_type ] gobject -> [ `cast_options ] gobject -> [ `array_ ] gobject
  val count : t -> [ `count_options ] gobject -> Int64.t
  val count_values : t -> [ `struct_array ] gobject
  val dictionary_encode : t -> [ `dictionary_array ] gobject
  val equal : t -> [ `array_ ] gobject -> bool
  val equal_approx : t -> [ `array_ ] gobject -> bool
  val equal_range : t -> Int64.t -> [ `array_ ] gobject -> Int64.t -> Int64.t -> bool
  val get_length : t -> Int64.t
  val get_n_nulls : t -> Int64.t
  val get_null_bitmap : t -> [ `buffer ] gobject
  val get_offset : t -> Int64.t
  val get_value_data_type : t -> [ `data_type ] gobject
  val is_null : t -> Int64.t -> bool
  val is_valid : t -> Int64.t -> bool
  val slice : t -> Int64.t -> Int64.t -> [ `array_ ] gobject
  val to_string : t -> string
  val unique : t -> [ `array_ ] gobject
end

module ArrayBuilder : sig
  type t = [ `array_builder ] gobject

  val of_gobject : _ gobject -> t
  val finish : t -> [ `array_ ] gobject
  val get_value_data_type : t -> [ `data_type ] gobject
end

module BinaryArray : sig
  type t = [ `binary_array ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `array_ ] gobject
  val new_ : Int64.t -> [ `buffer ] gobject -> [ `buffer ] gobject -> [ `buffer ] gobject -> Int64.t -> t
  val get_buffer : t -> [ `buffer ] gobject
  val get_offsets_buffer : t -> [ `buffer ] gobject
end

module BinaryArrayBuilder : sig
  type t = [ `binary_array_builder ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `array_builder ] gobject
  val new_ : unit -> t
  val append_null : t -> bool
end

module BinaryDataType : sig
  type t = [ `binary_data_type ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `data_type ] gobject
  val new_ : unit -> t
end

module BooleanArray : sig
  type t = [ `boolean_array ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `primitive_array ] gobject
  val new_ : Int64.t -> [ `buffer ] gobject -> [ `buffer ] gobject -> Int64.t -> t
  val and_ : t -> [ `boolean_array ] gobject -> [ `boolean_array ] gobject
  val get_value : t -> Int64.t -> bool
  val invert : t -> [ `boolean_array ] gobject
  val or_ : t -> [ `boolean_array ] gobject -> [ `boolean_array ] gobject
  val xor : t -> [ `boolean_array ] gobject -> [ `boolean_array ] gobject
end

module BooleanArrayBuilder : sig
  type t = [ `boolean_array_builder ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `array_builder ] gobject
  val new_ : unit -> t
  val append_null : t -> bool
  val append_nulls : t -> Int64.t -> bool
  val append_value : t -> bool -> bool
end

module BooleanDataType : sig
  type t = [ `boolean_data_type ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `fixed_width_data_type ] gobject
  val new_ : unit -> t
end

module Buffer : sig
  type t = [ `buffer ] gobject

  val of_gobject : _ gobject -> t
  val copy : t -> Int64.t -> Int64.t -> [ `buffer ] gobject
  val equal : t -> [ `buffer ] gobject -> bool
  val equal_n_bytes : t -> [ `buffer ] gobject -> Int64.t -> bool
  val get_capacity : t -> Int64.t
  val get_parent : t -> [ `buffer ] gobject
  val get_size : t -> Int64.t
  val is_mutable : t -> bool
  val slice : t -> Int64.t -> Int64.t -> [ `buffer ] gobject
end

module BufferInputStream : sig
  type t = [ `buffer_input_stream ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `seekable_input_stream ] gobject
  val new_ : [ `buffer ] gobject -> t
  val get_buffer : t -> [ `buffer ] gobject
end

module BufferOutputStream : sig
  type t = [ `buffer_output_stream ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `output_stream ] gobject
  val new_ : [ `resizable_buffer ] gobject -> t
end

module CSVReadOptions : sig
  type t = [ `csv_read_options ] gobject

  val of_gobject : _ gobject -> t
  val new_ : unit -> t
end

module CSVReader : sig
  type t = [ `csv_reader ] gobject

  val of_gobject : _ gobject -> t
  val new_ : [ `input_stream ] gobject -> [ `csv_read_options ] gobject -> t
  val read : t -> [ `table ] gobject
end

module CastOptions : sig
  type t = [ `cast_options ] gobject

  val of_gobject : _ gobject -> t
  val new_ : unit -> t
end

module ChunkedArray : sig
  type t = [ `chunked_array ] gobject

  val of_gobject : _ gobject -> t
  val equal : t -> [ `chunked_array ] gobject -> bool
  val get_chunk : t -> Unsigned.uint32 -> [ `array_ ] gobject
  val get_length : t -> Unsigned.uint64
  val get_n_chunks : t -> Unsigned.uint32
  val get_n_nulls : t -> Unsigned.uint64
  val get_value_data_type : t -> [ `data_type ] gobject
  val slice : t -> Unsigned.uint64 -> Unsigned.uint64 -> [ `chunked_array ] gobject
  val to_string : t -> string
end

module Codec : sig
  type t = [ `codec ] gobject

  val of_gobject : _ gobject -> t
  val get_name : t -> string
end

module Column : sig
  type t = [ `column ] gobject

  val of_gobject : _ gobject -> t
  val new_array : [ `field ] gobject -> [ `array_ ] gobject -> t
  val new_chunked_array : [ `field ] gobject -> [ `chunked_array ] gobject -> t
  val equal : t -> [ `column ] gobject -> bool
  val get_data : t -> [ `chunked_array ] gobject
  val get_data_type : t -> [ `data_type ] gobject
  val get_field : t -> [ `field ] gobject
  val get_length : t -> Unsigned.uint64
  val get_n_nulls : t -> Unsigned.uint64
  val get_name : t -> string
  val slice : t -> Unsigned.uint64 -> Unsigned.uint64 -> [ `column ] gobject
  val to_string : t -> string
end

module CompressedInputStream : sig
  type t = [ `compressed_input_stream ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `input_stream ] gobject
  val new_ : [ `codec ] gobject -> [ `input_stream ] gobject -> t
end

module CompressedOutputStream : sig
  type t = [ `compressed_output_stream ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `output_stream ] gobject
  val new_ : [ `codec ] gobject -> [ `output_stream ] gobject -> t
end

module CountOptions : sig
  type t = [ `count_options ] gobject

  val of_gobject : _ gobject -> t
  val new_ : unit -> t
end

module DataType : sig
  type t = [ `data_type ] gobject

  val of_gobject : _ gobject -> t
  val equal : t -> [ `data_type ] gobject -> bool
  val to_string : t -> string
end

module Date32Array : sig
  type t = [ `date32_array ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `numeric_array ] gobject
  val new_ : Int64.t -> [ `buffer ] gobject -> [ `buffer ] gobject -> Int64.t -> t
  val get_value : t -> Int64.t -> Int32.t
end

module Date32ArrayBuilder : sig
  type t = [ `date32_array_builder ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `array_builder ] gobject
  val new_ : unit -> t
  val append_null : t -> bool
  val append_nulls : t -> Int64.t -> bool
  val append_value : t -> Int32.t -> bool
end

module Date32DataType : sig
  type t = [ `date32_data_type ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `data_type ] gobject
  val new_ : unit -> t
end

module Date64Array : sig
  type t = [ `date64_array ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `numeric_array ] gobject
  val new_ : Int64.t -> [ `buffer ] gobject -> [ `buffer ] gobject -> Int64.t -> t
  val get_value : t -> Int64.t -> Int64.t
end

module Date64ArrayBuilder : sig
  type t = [ `date64_array_builder ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `array_builder ] gobject
  val new_ : unit -> t
  val append_null : t -> bool
  val append_nulls : t -> Int64.t -> bool
  val append_value : t -> Int64.t -> bool
end

module Date64DataType : sig
  type t = [ `date64_data_type ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `data_type ] gobject
  val new_ : unit -> t
end

module Decimal128 : sig
  type t = [ `decimal128 ] gobject

  val of_gobject : _ gobject -> t
  val new_integer : Int64.t -> t
  val new_string : string -> t
  val divide : t -> [ `decimal128 ] gobject -> [ `decimal128 ] gobject -> [ `decimal128 ] gobject
  val equal : t -> [ `decimal128 ] gobject -> bool
  val greater_than : t -> [ `decimal128 ] gobject -> bool
  val greater_than_or_equal : t -> [ `decimal128 ] gobject -> bool
  val less_than : t -> [ `decimal128 ] gobject -> bool
  val less_than_or_equal : t -> [ `decimal128 ] gobject -> bool
  val minus : t -> [ `decimal128 ] gobject -> [ `decimal128 ] gobject
  val multiply : t -> [ `decimal128 ] gobject -> [ `decimal128 ] gobject
  val not_equal : t -> [ `decimal128 ] gobject -> bool
  val plus : t -> [ `decimal128 ] gobject -> [ `decimal128 ] gobject
  val to_integer : t -> Int64.t
  val to_string : t -> string
  val to_string_scale : t -> Int32.t -> string
end

module Decimal128Array : sig
  type t = [ `decimal128_array ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `fixed_size_binary_array ] gobject
  val format_value : t -> Int64.t -> string
  val get_value : t -> Int64.t -> [ `decimal128 ] gobject
end

module Decimal128ArrayBuilder : sig
  type t = [ `decimal128_array_builder ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `array_builder ] gobject
  val new_ : [ `decimal128_data_type ] gobject -> t
  val append_null : t -> bool
  val append_value : t -> [ `decimal128 ] gobject -> bool
end

module Decimal128DataType : sig
  type t = [ `decimal128_data_type ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `decimal_data_type ] gobject
  val new_ : Int32.t -> Int32.t -> t
end

module DecimalDataType : sig
  type t = [ `decimal_data_type ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `fixed_size_binary_data_type ] gobject
  val get_precision : t -> Int32.t
  val get_scale : t -> Int32.t
end

module DenseUnionArray : sig
  type t = [ `dense_union_array ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `union_array ] gobject
end

module DenseUnionDataType : sig
  type t = [ `dense_union_data_type ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `union_data_type ] gobject
end

module DictionaryArray : sig
  type t = [ `dictionary_array ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `array_ ] gobject
  val new_ : [ `data_type ] gobject -> [ `array_ ] gobject -> t
  val get_dictionary : t -> [ `array_ ] gobject
  val get_dictionary_data_type : t -> [ `dictionary_data_type ] gobject
  val get_indices : t -> [ `array_ ] gobject
end

module DictionaryDataType : sig
  type t = [ `dictionary_data_type ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `fixed_width_data_type ] gobject
  val new_ : [ `data_type ] gobject -> [ `array_ ] gobject -> bool -> t
  val get_dictionary : t -> [ `array_ ] gobject
  val get_index_data_type : t -> [ `data_type ] gobject
  val is_ordered : t -> bool
end

module DoubleArray : sig
  type t = [ `double_array ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `numeric_array ] gobject
  val new_ : Int64.t -> [ `buffer ] gobject -> [ `buffer ] gobject -> Int64.t -> t
  val get_value : t -> Int64.t -> float
  val sum : t -> float
end

module DoubleArrayBuilder : sig
  type t = [ `double_array_builder ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `array_builder ] gobject
  val new_ : unit -> t
  val append_null : t -> bool
  val append_nulls : t -> Int64.t -> bool
  val append_value : t -> float -> bool
end

module DoubleDataType : sig
  type t = [ `double_data_type ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `floating_point_data_type ] gobject
  val new_ : unit -> t
end

module FeatherFileReader : sig
  type t = [ `feather_file_reader ] gobject

  val of_gobject : _ gobject -> t
  val new_ : [ `seekable_input_stream ] gobject -> t
  val get_column : t -> Int32.t -> [ `column ] gobject
  val get_column_name : t -> Int32.t -> string
  val get_description : t -> string
  val get_n_columns : t -> Int64.t
  val get_n_rows : t -> Int64.t
  val get_version : t -> Int32.t
  val has_description : t -> bool
  val read : t -> [ `table ] gobject
end

module FeatherFileWriter : sig
  type t = [ `feather_file_writer ] gobject

  val of_gobject : _ gobject -> t
  val new_ : [ `output_stream ] gobject -> t
  val append : t -> string -> [ `array_ ] gobject -> bool
  val close : t -> bool
  val write : t -> [ `table ] gobject -> bool
end

module Field : sig
  type t = [ `field ] gobject

  val of_gobject : _ gobject -> t
  val new_ : string -> [ `data_type ] gobject -> t
  val new_full : string -> [ `data_type ] gobject -> bool -> t
  val equal : t -> [ `field ] gobject -> bool
  val get_data_type : t -> [ `data_type ] gobject
  val get_name : t -> string
  val is_nullable : t -> bool
  val to_string : t -> string
end

module FileOutputStream : sig
  type t = [ `file_output_stream ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `output_stream ] gobject
  val new_ : string -> bool -> t
end

module FixedSizeBinaryArray : sig
  type t = [ `fixed_size_binary_array ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `primitive_array ] gobject
end

module FixedSizeBinaryDataType : sig
  type t = [ `fixed_size_binary_data_type ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `fixed_width_data_type ] gobject
  val new_ : Int32.t -> t
  val get_byte_width : t -> Int32.t
end

module FixedWidthDataType : sig
  type t = [ `fixed_width_data_type ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `data_type ] gobject
  val get_bit_width : t -> Int32.t
end

module FloatArray : sig
  type t = [ `float_array ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `numeric_array ] gobject
  val new_ : Int64.t -> [ `buffer ] gobject -> [ `buffer ] gobject -> Int64.t -> t
  val get_value : t -> Int64.t -> float
  val sum : t -> float
end

module FloatArrayBuilder : sig
  type t = [ `float_array_builder ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `array_builder ] gobject
  val new_ : unit -> t
  val append_null : t -> bool
  val append_nulls : t -> Int64.t -> bool
  val append_value : t -> float -> bool
end

module FloatDataType : sig
  type t = [ `float_data_type ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `floating_point_data_type ] gobject
  val new_ : unit -> t
end

module FloatingPointDataType : sig
  type t = [ `floating_point_data_type ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `numeric_data_type ] gobject
end

module GIOInputStream : sig
  type t = [ `gio_input_stream ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `seekable_input_stream ] gobject
  val new_ : [ `input_stream ] gobject -> t
end

module GIOOutputStream : sig
  type t = [ `gio_output_stream ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `output_stream ] gobject
  val new_ : [ `output_stream ] gobject -> t
end

module InputStream : sig
  type t = [ `input_stream ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `input_stream ] gobject
  val advance : t -> Int64.t -> bool
  val align : t -> Int32.t -> bool
  val read_tensor : t -> [ `tensor ] gobject
end

module Int16Array : sig
  type t = [ `int16_array ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `numeric_array ] gobject
  val new_ : Int64.t -> [ `buffer ] gobject -> [ `buffer ] gobject -> Int64.t -> t
  val get_value : t -> Int64.t -> int
  val sum : t -> Int64.t
end

module Int16ArrayBuilder : sig
  type t = [ `int16_array_builder ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `array_builder ] gobject
  val new_ : unit -> t
  val append_null : t -> bool
  val append_nulls : t -> Int64.t -> bool
  val append_value : t -> int -> bool
end

module Int16DataType : sig
  type t = [ `int16_data_type ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `integer_data_type ] gobject
  val new_ : unit -> t
end

module Int32Array : sig
  type t = [ `int32_array ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `numeric_array ] gobject
  val new_ : Int64.t -> [ `buffer ] gobject -> [ `buffer ] gobject -> Int64.t -> t
  val get_value : t -> Int64.t -> Int32.t
  val sum : t -> Int64.t
end

module Int32ArrayBuilder : sig
  type t = [ `int32_array_builder ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `array_builder ] gobject
  val new_ : unit -> t
  val append_null : t -> bool
  val append_nulls : t -> Int64.t -> bool
  val append_value : t -> Int32.t -> bool
end

module Int32DataType : sig
  type t = [ `int32_data_type ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `integer_data_type ] gobject
  val new_ : unit -> t
end

module Int64Array : sig
  type t = [ `int64_array ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `numeric_array ] gobject
  val new_ : Int64.t -> [ `buffer ] gobject -> [ `buffer ] gobject -> Int64.t -> t
  val get_value : t -> Int64.t -> Int64.t
  val sum : t -> Int64.t
end

module Int64ArrayBuilder : sig
  type t = [ `int64_array_builder ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `array_builder ] gobject
  val new_ : unit -> t
  val append_null : t -> bool
  val append_nulls : t -> Int64.t -> bool
  val append_value : t -> Int64.t -> bool
end

module Int64DataType : sig
  type t = [ `int64_data_type ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `integer_data_type ] gobject
  val new_ : unit -> t
end

module Int8Array : sig
  type t = [ `int8_array ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `numeric_array ] gobject
  val new_ : Int64.t -> [ `buffer ] gobject -> [ `buffer ] gobject -> Int64.t -> t
  val get_value : t -> Int64.t -> int
  val sum : t -> Int64.t
end

module Int8ArrayBuilder : sig
  type t = [ `int8_array_builder ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `array_builder ] gobject
  val new_ : unit -> t
  val append_null : t -> bool
  val append_nulls : t -> Int64.t -> bool
  val append_value : t -> int -> bool
end

module Int8DataType : sig
  type t = [ `int8_data_type ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `integer_data_type ] gobject
  val new_ : unit -> t
end

module IntArrayBuilder : sig
  type t = [ `int_array_builder ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `array_builder ] gobject
  val new_ : unit -> t
  val append_null : t -> bool
  val append_nulls : t -> Int64.t -> bool
  val append_value : t -> Int64.t -> bool
end

module IntegerDataType : sig
  type t = [ `integer_data_type ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `numeric_data_type ] gobject
end

module ListArray : sig
  type t = [ `list_array ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `array_ ] gobject
  val new_ : [ `data_type ] gobject -> Int64.t -> [ `buffer ] gobject -> [ `array_ ] gobject -> [ `buffer ] gobject -> Int64.t -> t
  val get_value : t -> Int64.t -> [ `array_ ] gobject
  val get_value_type : t -> [ `data_type ] gobject
end

module ListArrayBuilder : sig
  type t = [ `list_array_builder ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `array_builder ] gobject
  val new_ : [ `list_data_type ] gobject -> t
  val append_null : t -> bool
  val append_value : t -> bool
  val get_value_builder : t -> [ `array_builder ] gobject
end

module ListDataType : sig
  type t = [ `list_data_type ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `data_type ] gobject
  val new_ : [ `field ] gobject -> t
  val get_field : t -> [ `field ] gobject
end

module MemoryMappedInputStream : sig
  type t = [ `memory_mapped_input_stream ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `seekable_input_stream ] gobject
  val new_ : string -> t
end

module MutableBuffer : sig
  type t = [ `mutable_buffer ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `buffer ] gobject
  val slice : t -> Int64.t -> Int64.t -> [ `mutable_buffer ] gobject
end

module NullArray : sig
  type t = [ `null_array ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `array_ ] gobject
  val new_ : Int64.t -> t
end

module NullArrayBuilder : sig
  type t = [ `null_array_builder ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `array_builder ] gobject
  val new_ : unit -> t
  val append_null : t -> bool
  val append_nulls : t -> Int64.t -> bool
end

module NullDataType : sig
  type t = [ `null_data_type ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `data_type ] gobject
  val new_ : unit -> t
end

module NumericArray : sig
  type t = [ `numeric_array ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `primitive_array ] gobject
  val mean : t -> float
end

module NumericDataType : sig
  type t = [ `numeric_data_type ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `fixed_width_data_type ] gobject
end

module OutputStream : sig
  type t = [ `output_stream ] gobject

  val of_gobject : _ gobject -> t
  val align : t -> Int32.t -> bool
  val write_tensor : t -> [ `tensor ] gobject -> Int64.t
end

module PrimitiveArray : sig
  type t = [ `primitive_array ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `array_ ] gobject
  val get_buffer : t -> [ `buffer ] gobject
end

module RecordBatch : sig
  type t = [ `record_batch ] gobject

  val of_gobject : _ gobject -> t
  val add_column : t -> Unsigned.uint32 -> [ `field ] gobject -> [ `array_ ] gobject -> [ `record_batch ] gobject
  val equal : t -> [ `record_batch ] gobject -> bool
  val get_column : t -> Int32.t -> [ `array_ ] gobject
  val get_column_name : t -> Int32.t -> string
  val get_n_columns : t -> Unsigned.uint32
  val get_n_rows : t -> Int64.t
  val get_schema : t -> [ `schema ] gobject
  val remove_column : t -> Unsigned.uint32 -> [ `record_batch ] gobject
  val slice : t -> Int64.t -> Int64.t -> [ `record_batch ] gobject
  val to_string : t -> string
end

module RecordBatchBuilder : sig
  type t = [ `record_batch_builder ] gobject

  val of_gobject : _ gobject -> t
  val new_ : [ `schema ] gobject -> t
  val flush : t -> [ `record_batch ] gobject
  val get_column_builder : t -> Int32.t -> [ `array_builder ] gobject
  val get_initial_capacity : t -> Int64.t
  val get_n_columns : t -> Int32.t
  val get_schema : t -> [ `schema ] gobject
end

module RecordBatchFileReader : sig
  type t = [ `record_batch_file_reader ] gobject

  val of_gobject : _ gobject -> t
  val new_ : [ `seekable_input_stream ] gobject -> t
  val get_n_record_batches : t -> Unsigned.uint32
  val get_schema : t -> [ `schema ] gobject
  val read_record_batch : t -> Unsigned.uint32 -> [ `record_batch ] gobject
end

module RecordBatchFileWriter : sig
  type t = [ `record_batch_file_writer ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `record_batch_stream_writer ] gobject
  val new_ : [ `output_stream ] gobject -> [ `schema ] gobject -> t
end

module RecordBatchReader : sig
  type t = [ `record_batch_reader ] gobject

  val of_gobject : _ gobject -> t
  val get_schema : t -> [ `schema ] gobject
  val read_next : t -> [ `record_batch ] gobject
end

module RecordBatchStreamReader : sig
  type t = [ `record_batch_stream_reader ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `record_batch_reader ] gobject
  val new_ : [ `input_stream ] gobject -> t
end

module RecordBatchStreamWriter : sig
  type t = [ `record_batch_stream_writer ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `record_batch_writer ] gobject
  val new_ : [ `output_stream ] gobject -> [ `schema ] gobject -> t
end

module RecordBatchWriter : sig
  type t = [ `record_batch_writer ] gobject

  val of_gobject : _ gobject -> t
  val close : t -> bool
  val write_record_batch : t -> [ `record_batch ] gobject -> bool
  val write_table : t -> [ `table ] gobject -> bool
end

module ResizableBuffer : sig
  type t = [ `resizable_buffer ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `mutable_buffer ] gobject
  val new_ : Int64.t -> t
  val reserve : t -> Int64.t -> bool
  val resize : t -> Int64.t -> bool
end

module Schema : sig
  type t = [ `schema ] gobject

  val of_gobject : _ gobject -> t
  val add_field : t -> Unsigned.uint32 -> [ `field ] gobject -> [ `schema ] gobject
  val equal : t -> [ `schema ] gobject -> bool
  val get_field : t -> Unsigned.uint32 -> [ `field ] gobject
  val get_field_by_name : t -> string -> [ `field ] gobject
  val n_fields : t -> Unsigned.uint32
  val remove_field : t -> Unsigned.uint32 -> [ `schema ] gobject
  val replace_field : t -> Unsigned.uint32 -> [ `field ] gobject -> [ `schema ] gobject
  val to_string : t -> string
end

module SeekableInputStream : sig
  type t = [ `seekable_input_stream ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `input_stream ] gobject
  val get_size : t -> Unsigned.uint64
  val get_support_zero_copy : t -> bool
  val read_at : t -> Int64.t -> Int64.t -> [ `buffer ] gobject
end

module SparseUnionArray : sig
  type t = [ `sparse_union_array ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `union_array ] gobject
end

module SparseUnionDataType : sig
  type t = [ `sparse_union_data_type ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `union_data_type ] gobject
end

module StringArray : sig
  type t = [ `string_array ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `binary_array ] gobject
  val new_ : Int64.t -> [ `buffer ] gobject -> [ `buffer ] gobject -> [ `buffer ] gobject -> Int64.t -> t
  val get_string : t -> Int64.t -> string
end

module StringArrayBuilder : sig
  type t = [ `string_array_builder ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `binary_array_builder ] gobject
  val new_ : unit -> t
  val append_value : t -> string -> bool
end

module StringDataType : sig
  type t = [ `string_data_type ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `data_type ] gobject
  val new_ : unit -> t
end

module StructArray : sig
  type t = [ `struct_array ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `array_ ] gobject
  val get_field : t -> Int32.t -> [ `array_ ] gobject
end

module StructArrayBuilder : sig
  type t = [ `struct_array_builder ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `array_builder ] gobject
  val new_ : [ `struct_data_type ] gobject -> t
  val append_null : t -> bool
  val append_value : t -> bool
  val get_field_builder : t -> Int32.t -> [ `array_builder ] gobject
end

module StructDataType : sig
  type t = [ `struct_data_type ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `data_type ] gobject
  val get_field : t -> Int32.t -> [ `field ] gobject
  val get_field_by_name : t -> string -> [ `field ] gobject
  val get_field_index : t -> string -> Int32.t
  val get_n_fields : t -> Int32.t
end

module Table : sig
  type t = [ `table ] gobject

  val of_gobject : _ gobject -> t
  val add_column : t -> Unsigned.uint32 -> [ `column ] gobject -> [ `table ] gobject
  val equal : t -> [ `table ] gobject -> bool
  val get_column : t -> Unsigned.uint32 -> [ `column ] gobject
  val get_n_columns : t -> Unsigned.uint32
  val get_n_rows : t -> Unsigned.uint64
  val get_schema : t -> [ `schema ] gobject
  val remove_column : t -> Unsigned.uint32 -> [ `table ] gobject
  val replace_column : t -> Unsigned.uint32 -> [ `column ] gobject -> [ `table ] gobject
  val to_string : t -> string
end

module TableBatchReader : sig
  type t = [ `table_batch_reader ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `record_batch_reader ] gobject
  val new_ : [ `table ] gobject -> t
end

module Tensor : sig
  type t = [ `tensor ] gobject

  val of_gobject : _ gobject -> t
  val equal : t -> [ `tensor ] gobject -> bool
  val get_buffer : t -> [ `buffer ] gobject
  val get_dimension_name : t -> Int32.t -> string
  val get_n_dimensions : t -> Int32.t
  val get_size : t -> Int64.t
  val get_value_data_type : t -> [ `data_type ] gobject
  val is_column_major : t -> bool
  val is_contiguous : t -> bool
  val is_mutable : t -> bool
  val is_row_major : t -> bool
end

module Time32Array : sig
  type t = [ `time32_array ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `numeric_array ] gobject
  val new_ : [ `time32_data_type ] gobject -> Int64.t -> [ `buffer ] gobject -> [ `buffer ] gobject -> Int64.t -> t
  val get_value : t -> Int64.t -> Int32.t
end

module Time32ArrayBuilder : sig
  type t = [ `time32_array_builder ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `array_builder ] gobject
  val new_ : [ `time32_data_type ] gobject -> t
  val append_null : t -> bool
  val append_nulls : t -> Int64.t -> bool
  val append_value : t -> Int32.t -> bool
end

module Time32DataType : sig
  type t = [ `time32_data_type ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `time_data_type ] gobject
end

module Time64Array : sig
  type t = [ `time64_array ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `numeric_array ] gobject
  val new_ : [ `time64_data_type ] gobject -> Int64.t -> [ `buffer ] gobject -> [ `buffer ] gobject -> Int64.t -> t
  val get_value : t -> Int64.t -> Int64.t
end

module Time64ArrayBuilder : sig
  type t = [ `time64_array_builder ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `array_builder ] gobject
  val new_ : [ `time64_data_type ] gobject -> t
  val append_null : t -> bool
  val append_nulls : t -> Int64.t -> bool
  val append_value : t -> Int64.t -> bool
end

module Time64DataType : sig
  type t = [ `time64_data_type ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `time_data_type ] gobject
end

module TimeDataType : sig
  type t = [ `time_data_type ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `data_type ] gobject
end

module TimestampArray : sig
  type t = [ `timestamp_array ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `numeric_array ] gobject
  val new_ : [ `timestamp_data_type ] gobject -> Int64.t -> [ `buffer ] gobject -> [ `buffer ] gobject -> Int64.t -> t
  val get_value : t -> Int64.t -> Int64.t
end

module TimestampArrayBuilder : sig
  type t = [ `timestamp_array_builder ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `array_builder ] gobject
  val new_ : [ `timestamp_data_type ] gobject -> t
  val append_null : t -> bool
  val append_nulls : t -> Int64.t -> bool
  val append_value : t -> Int64.t -> bool
end

module TimestampDataType : sig
  type t = [ `timestamp_data_type ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `data_type ] gobject
end

module UInt16Array : sig
  type t = [ `u_int16_array ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `numeric_array ] gobject
  val new_ : Int64.t -> [ `buffer ] gobject -> [ `buffer ] gobject -> Int64.t -> t
  val get_value : t -> Int64.t -> Unsigned.uint16
  val sum : t -> Unsigned.uint64
end

module UInt16ArrayBuilder : sig
  type t = [ `u_int16_array_builder ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `array_builder ] gobject
  val new_ : unit -> t
  val append_null : t -> bool
  val append_nulls : t -> Int64.t -> bool
  val append_value : t -> Unsigned.uint16 -> bool
end

module UInt16DataType : sig
  type t = [ `u_int16_data_type ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `integer_data_type ] gobject
  val new_ : unit -> t
end

module UInt32Array : sig
  type t = [ `u_int32_array ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `numeric_array ] gobject
  val new_ : Int64.t -> [ `buffer ] gobject -> [ `buffer ] gobject -> Int64.t -> t
  val get_value : t -> Int64.t -> Unsigned.uint32
  val sum : t -> Unsigned.uint64
end

module UInt32ArrayBuilder : sig
  type t = [ `u_int32_array_builder ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `array_builder ] gobject
  val new_ : unit -> t
  val append_null : t -> bool
  val append_nulls : t -> Int64.t -> bool
  val append_value : t -> Unsigned.uint32 -> bool
end

module UInt32DataType : sig
  type t = [ `u_int32_data_type ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `integer_data_type ] gobject
  val new_ : unit -> t
end

module UInt64Array : sig
  type t = [ `u_int64_array ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `numeric_array ] gobject
  val new_ : Int64.t -> [ `buffer ] gobject -> [ `buffer ] gobject -> Int64.t -> t
  val get_value : t -> Int64.t -> Unsigned.uint64
  val sum : t -> Unsigned.uint64
end

module UInt64ArrayBuilder : sig
  type t = [ `u_int64_array_builder ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `array_builder ] gobject
  val new_ : unit -> t
  val append_null : t -> bool
  val append_nulls : t -> Int64.t -> bool
  val append_value : t -> Unsigned.uint64 -> bool
end

module UInt64DataType : sig
  type t = [ `u_int64_data_type ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `integer_data_type ] gobject
  val new_ : unit -> t
end

module UInt8Array : sig
  type t = [ `u_int8_array ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `numeric_array ] gobject
  val new_ : Int64.t -> [ `buffer ] gobject -> [ `buffer ] gobject -> Int64.t -> t
  val get_value : t -> Int64.t -> Unsigned.uint8
  val sum : t -> Unsigned.uint64
end

module UInt8ArrayBuilder : sig
  type t = [ `u_int8_array_builder ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `array_builder ] gobject
  val new_ : unit -> t
  val append_null : t -> bool
  val append_nulls : t -> Int64.t -> bool
  val append_value : t -> Unsigned.uint8 -> bool
end

module UInt8DataType : sig
  type t = [ `u_int8_data_type ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `integer_data_type ] gobject
  val new_ : unit -> t
end

module UIntArrayBuilder : sig
  type t = [ `u_int_array_builder ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `array_builder ] gobject
  val new_ : unit -> t
  val append_null : t -> bool
  val append_nulls : t -> Int64.t -> bool
  val append_value : t -> Unsigned.uint64 -> bool
end

module UnionArray : sig
  type t = [ `union_array ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `array_ ] gobject
  val get_field : t -> Int32.t -> [ `array_ ] gobject
end

module UnionDataType : sig
  type t = [ `union_data_type ] gobject

  val of_gobject : _ gobject -> t
  val parent : t -> [ `data_type ] gobject
  val get_field : t -> Int32.t -> [ `field ] gobject
  val get_n_fields : t -> Int32.t
end

